package bot.commands

import bot.MainLogger.Companion.logger
import bot.SuccessfulPaymentFilter
import bot.callbacks.CallbackManager.staticCallbackQuery
import bot.commandMenu
import bot.telegramBot
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.dispatcher.preCheckoutQuery
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.payments.InvoiceUserDetail
import com.github.kotlintelegrambot.entities.payments.LabeledPrice
import com.github.kotlintelegrambot.entities.payments.PaymentInvoiceInfo
import com.mongodb.client.model.Filters
import database.MineDB
import database.MineDB.connection
import database.MongoDB
import kotlinx.coroutines.*
import models.invoice.Amount
import models.invoice.Item
import models.invoice.ProviderData
import models.minecraft.MinecraftUser
import models.mongo.MongoPayment
import models.mongo.MongoPrecheckout
import models.telegram.buttons.Buttons
import utils.chatId
import java.math.BigInteger

fun Dispatcher.subscribeCommands(){

    commandMenu("subscribe", "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"){
        val user = MinecraftUser.getFromDatabase(message.from?.id?: return@commandMenu)
        if(user == null){
            bot.sendMessage(message.chatId, "–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
            return@commandMenu
        }
        val days = user.getSubscriptionDays()
        if(days == null){
            bot.sendMessage(message.chatId, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", replyMarkup = Buttons.payment.buttons)
            return@commandMenu
        }
        bot.sendMessage(message.chatId, "–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç $days –¥–Ω–µ–π. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë?", replyMarkup = Buttons.payment.buttons)
        return@commandMenu
    }

    staticCallbackQuery("1:m"){
        logger.trace("1m")
        bot.sendInvoice(
            ChatId.fromId(callbackQuery.from.id),
            PaymentInvoiceInfo(
                title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MasturLand",
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –Ω–∞ 30 –¥–Ω–µ–π.",
                payload = "1",
                providerToken = MineDB.settings.yoomany_prod,
                currency = "RUB",
                prices = listOf(
                    LabeledPrice(
                        label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                        amount = BigInteger.valueOf(200_00)
                    ),
                ),
                startParameter = "",
                invoiceUserDetail = InvoiceUserDetail(
                    needEmail = true,
                    sendEmailToProvider = true
                ),
                providerData = ProviderData.create(
                    Item(
                        "–ò–≥—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç —Å–µ—Ä–≤–µ—Ä (30 –¥–Ω–µ–π)",
                        "1",
                        Amount(
                            currency = "RUB",
                            value = "200.00"
                        ),
                        vat_code = 1
                    )
                ).toJson()
            )
        ).apply {
            println(this)
        }
    }

    staticCallbackQuery("3:m") {
        logger.trace("3m")
        bot.sendInvoice(
            ChatId.fromId(callbackQuery.from.id),
            PaymentInvoiceInfo(
                title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ MasturLand",
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –Ω–∞ 90 –¥–Ω–µ–π",
                payload = "3",
                providerToken = MineDB.settings.yoomany_prod,
                currency = "RUB",
                prices = listOf(
                    LabeledPrice(
                        label = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 90 –¥–Ω–µ–π",
                        amount = BigInteger.valueOf(700_00)
                    ),
                ),
                startParameter = "",
                invoiceUserDetail = InvoiceUserDetail(
                    needEmail = true,
                    sendEmailToProvider = true
                ),
                providerData = ProviderData.create(
                    Item(
                        "–ò–≥—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç —Å–µ—Ä–≤–µ—Ä (90 –¥–Ω–µ–π)",
                        "1",
                        Amount(
                            currency = "RUB",
                            value = "700.00"
                        ),
                        vat_code = 1
                    )
                ).toJson()
            )
        ).apply {
            println(this)
        }
    }

    preCheckoutQuery {
        println(this.preCheckoutQuery)
        requireNotNull(preCheckoutQuery.orderInfo?.email)
        bot.answerPreCheckoutQuery(preCheckoutQuery.id, true)
        MongoDB.preCheckouts.add(MongoPrecheckout.fromHandler(preCheckoutQuery))
        logger.info("preCheckout complete")
    }

    message(SuccessfulPaymentFilter) {
        logger.info("new SuccessfulPayment payment")
        this.message.successfulPayment?.apply {
            MongoDB.payments.add(MongoPayment.fromMessage(message))
            val user = MinecraftUser.getFromDatabase(message.from!!.id)!!
            when(invoicePayload){
                "1"->{
                    user.addSubscriptionDays(30)
                    bot.sendMessage(user.chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π!")
                    logger.info("–ü—Ä–æ—Ö–æ–¥–∫–∞ –Ω–∞ –º–∞—Å—Ç—É—Ä–ª–µ–Ω–¥ 30 –¥–Ω–µ–π –æ—Ç user_id: ${user.chatId}")
                }
                "3"->{
                    user.addSubscriptionDays(90)
                    bot.sendMessage(user.chatId, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 90 –¥–Ω–µ–π!")
                    logger.info("–ü—Ä–æ—Ö–æ–¥–∫–∞ –Ω–∞ –º–∞—Å—Ç—É—Ä–ª–µ–Ω–¥ 90 –¥–Ω–µ–π –æ—Ç user_id: ${user.chatId}")
                }
            }
        }
    }

    command("promo"){
        val user = MinecraftUser.getFromDatabase(message.from?.id?: return@command)
        if(user == null){
            bot.sendMessage(message.chatId, "–ü–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /register –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
            return@command
        }

        if(args.count() != 1 ){
            bot.sendMessage(message.chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /promo –∫–æ–¥")
            return@command
        }

        val input = args.first()

        val code = MongoDB.promos.find(Filters.eq("code", input))
        if(code == null){
            bot.sendMessage(message.chatId, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return@command
        }
        if(code.activated_at != null){
            bot.sendMessage(message.chatId, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return@command
        }

        val split = code.details.split(":")
        val action = split[0]
        val reward = split[1]

        when(action){
            "sub" -> {
                user.addSubscriptionDays(reward.toInt())
                code.activate(user)
                bot.sendMessage(message.chatId, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ $reward –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            }
            else ->{
                bot.sendMessage(message.chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
                return@command
            }
        }

    }
}

@OptIn(ExperimentalCoroutinesApi::class, DelicateCoroutinesApi::class)
fun subscribeCheckerStart(){
    val ctx = newSingleThreadContext("Updater")
    CoroutineScope(ctx).launch {
        while(true){
            delay(10000)
            connection.prepareStatement("select * from users where subscribe_end < now();").use { users ->
                val query = users.executeQuery()
                while(query.next()){
                    val telegram_id = query.getString("telegram_id")
                    val user = MinecraftUser.getFromDatabase(telegram_id.toLong()) ?: return@launch
                    user.unsubscribe()
                    println("[Subscriptions] Expire unsub - ${user.username}")
                    telegramBot.sendMessage(user.chatId, "sub end")
                }
            }
            connection.prepareStatement("update users set subscribe_end = null where subscribe_end < now()").use { query->
                query.execute()
            }
        }
    }
}

