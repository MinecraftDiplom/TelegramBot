package bot.commands

import bot.MainLogger.Companion.logger
import bot.callbacks.ContextType
import bot.callbacks.MongoBrakDTO
import bot.callbacks.Pages
import bot.callbacks.msgbox
import bot.commandMenu
import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ParseMode
import com.mongodb.client.model.*
import com.mongodb.client.model.Aggregates.*
import database.MongoDB
import database.MongoDB.braks
import kotlinx.coroutines.flow.toList
import kotlinx.coroutines.runBlocking
import models.braks.FamilyTree
import models.mongo.MongoBrak
import models.mongo.MongoUser
import org.bson.Document
import utils.chatId
import utils.getTimeMillis
import utils.telegramTreeFileFromID
import utils.timeToString
import kotlin.random.Random
import kotlin.system.measureTimeMillis

fun Dispatcher.brakCommands() {

    commandMenu("mybrak", "üíç –ë—Ä–∞–∫") {
        val fromUser = message.from ?: return@commandMenu
        val brak = MongoBrak.getFromUser(fromUser)
        if (brak == null) {
            bot.sendMessage(message.chatId, "@${fromUser.username}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –±—Ä–∞–∫–µ. üò•")
            return@commandMenu
        }
        bot.sendMessage(message.chatId, brak.toForm(message.chat.id))
    }

    command("gosex") {
        val fromUser = message.from ?: return@command
        if (message.replyToMessage == null) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞. üòòüí¨",
                replyToMessageId = message.messageId
            )
            bot.deleteMessage(message.chatId, message.messageId)
            return@command
        }

        val toUser = message.replyToMessage!!.from ?: return@command
        if (fromUser.id == toUser.id) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, –±—Ä–∞–∫ —Å —Å–æ–±–æ–π –Ω–µ–ª—å–∑—è, –ø—Ä–∏–¥—ë—Ç—Å—è –∏—Å–∫–∞—Ç—å –ø–∞—Ä—É. üò•",
                replyToMessageId = message.messageId
            )
            bot.deleteMessage(message.chatId, message.messageId)
            return@command
        }
        if (toUser.isBot) {
            bot.sendMessage(
                message.chatId, "@${fromUser.username}, –±–æ—Ç–∞ –Ω–µ —Ç—Ä–æ–≥–∞–π. üëø", replyToMessageId = message.messageId
            )
            bot.deleteMessage(message.chatId, message.messageId)
            return@command
        }
        if (MongoBrak.getFromUser(fromUser) != null) {
            bot.sendMessage(
                message.chatId, "@${fromUser.username}, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –±—Ä–∞–∫. üëø", replyToMessageId = message.messageId
            )
            bot.deleteMessage(message.chatId, message.messageId)
            return@command
        }
        if (MongoBrak.getFromUser(toUser) != null) {
            bot.sendMessage(
                message.chatId, "@${fromUser.username}, —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å –±—Ä–∞–∫. üëø", replyToMessageId = message.messageId
            )
            bot.deleteMessage(message.chatId, message.messageId)
            return@command
        }

        msgbox(message.chatId) {
            deleteTime = 360
            text =
                "\uD83D\uDC8D @${toUser.username}, –º–∏–Ω—É—Ç–æ—á–∫—É –≤–Ω–∏–º–∞–Ω–∏—è.\n" + "\uD83D\uDC96 @${fromUser.username} —Å–¥–µ–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞."
            button("–î–∞! ‚ù§\uFE0F\u200D\uD83D\uDD25", ContextType.CHOOSE_ONE, listOf(toUser.id)) {
                braks.add(MongoBrak(fromUser.id.toLong(), toUser.id.toLong()))?.apply {
                    if (isNull.not()) {
                        answerMessage("–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†\uFE0F\n@${fromUser.username} –∏ @${toUser.username} —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–µ ‚ù§\uFE0F\u200D\uD83D\uDD25")
                        val first = Filters.eq("id", fromUser.id)
                        val second = Filters.eq("id", toUser.id)
                        val query = Filters.or(first, second)
                        val updates = Updates.combine(
                            Updates.inc(MongoUser::braksCount.name, 1),
                        )
                        val options = UpdateOptions().upsert(true)
                        MongoDB.users.collection.updateMany(query, updates, options)
                    } else answerMessage("–µ—Ä—Ä–æ—Ä")
                }
            }
            button("–ù–µ—Ç! \uD83D\uDC94", ContextType.CHOOSE_ONE, listOf(toUser.id)) {
                answerMessage("–û—Ç–∫–∞–∑ \uD83D\uDDA4")
            }
        }.sendApplied()
    }

    commandMenu("endsex", "üíî –†–∞–∑–≤–æ–¥") {
        val user = message.from ?: return@commandMenu
        val brak = MongoBrak.getFromUser(user)
        if (brak == null) {
            bot.sendMessage(
                message.chatId, "@${user.username}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –±—Ä–∞–∫–µ. üò•", replyToMessageId = message.messageId
            )
            return@commandMenu
        }
        msgbox(message.chatId) {
            text = "@${user.username}, —Ç—ã —É–≤–µ—Ä–µ–Ω? \uD83D\uDC94"
            button("–î–∞.", ContextType.ONE_CLICK, listOf(user.id)) {
                answerMessage("–ë—Ä–∞–∫ –º–µ–∂–¥—É @${brak.firstUsername()} –∏ @${brak.secondUsername()} —Ä–∞—Å–ø–∞–ª—Å—è. \uD83D\uDDA4\n–û–Ω–∏ –ø—Ä–æ–∂–∏–ª–∏ –≤–º–µ—Å—Ç–µ ${brak.time.timeToString()}")
                braks.delete(Filters.eq("_id", brak._id))
            }
        }.sendApplied()
    }

    val globalPipeline = listOf(
        lookup("users", "firstUserID", "id", "firstUser"),
        lookup("users", "secondUserID", "id", "secondUser"),
        unwind("\$firstUser"),
        unwind("\$secondUser"),
        lookup("messages", "firstUserID", "from.id", "firstUserMessages"),
        lookup("messages", "secondUserID", "from.id", "secondUserMessages"),
        project(
            Projections.fields(
                Projections.excludeId(),
                Projections.include("firstUserID"),
                Projections.include("secondUserID"),
                Projections.include("firstUser"),
                Projections.include("secondUser"),
                Projections.include("time"),
                Projections.computed(
                    "firstUserMessages",
                    Document(
                        "\$size",
                        Document(
                            "\$filter", Document("input", "\$firstUserMessages")
                                .append("as", "message")
                                .append("cond", Document("\$ne", listOf("\$\$message.chat.type", "private")))
                        )
                    ),
                ),
                Projections.computed(
                    "secondUserMessages",
                    Document(
                        "\$size",
                        Document(
                            "\$filter", Document("input", "\$secondUserMessages")
                                .append("as", "message")
                                .append("cond", Document("\$ne", listOf("\$\$message.chat.type", "private")))
                        )
                    ),
                ),
            )
        ),
        addFields(
            Field("messageCount", Document("\$sum", listOf("\$firstUserMessages", "\$secondUserMessages"))),
        ),
        sort(Sorts.descending("messageCount")),
    )

    commandMenu("braksglobal", "üåç –ë—Ä–∞–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤") {
        measureTimeMillis {
            val list = braks.collection.aggregate<MongoBrakDTO>(globalPipeline).toList()
            if (list.isEmpty()) return@commandMenu
            Pages(message.chat.id, listOf(message.from?.id ?: return@commandMenu)).apply {
                fillPages(list) {
                    msgbox(message.chatId) {
                        parseType = ParseMode.HTML
                        text = "\uD83D\uDC8D –ë–†–ê–ö–ò (${list.size}) \uD83D\uDC8D\n"
                    }
                }
            }.update()
        }.apply {
            logger.info("braks global send $this ms")
        }
    }

    commandMenu("braks", "üí¨ –ë—Ä–∞–∫–∏ —á–∞—Ç–∞") {
        measureTimeMillis {
            val localPipeline = listOf(
                lookup("users", "firstUserID", "id", "firstUser"),
                lookup("users", "secondUserID", "id", "secondUser"),
                unwind("\$firstUser"),
                unwind("\$secondUser"),
                lookup("messages", "firstUserID", "from.id", "firstUserMessages"),
                lookup("messages", "secondUserID", "from.id", "secondUserMessages"),
                project(
                    Projections.fields(
                        Projections.excludeId(),
                        Projections.include("firstUserID"),
                        Projections.include("secondUserID"),
                        Projections.include("firstUser"),
                        Projections.include("secondUser"),
                        Projections.include("time"),
                        Projections.computed(
                            "firstUserMessages", Document(
                                "\$size", Document(
                                    "\$filter", Document("input", "\$firstUserMessages")
                                        .append("as", "message")
                                        .append(
                                            "cond",
                                            Document("\$eq", listOf("\$\$message.chat.id", message.chat.id))
                                        )
                                )
                            )
                        ),
                        Projections.computed(
                            "secondUserMessages", Document(
                                "\$size", Document(
                                    "\$filter", Document("input", "\$secondUserMessages")
                                        .append("as", "message")
                                        .append(
                                            "cond",
                                            Document("\$eq", listOf("\$\$message.chat.id", message.chat.id))
                                        )
                                )
                            )
                        ),
                    )
                ),
                addFields(
                    Field("messageCount", Document("\$sum", listOf("\$firstUserMessages", "\$secondUserMessages"))),
                ),
                sort(Sorts.descending("messageCount")),
            )

            val list = braks.collection.aggregate<MongoBrakDTO>(localPipeline).toList()
            if (list.isEmpty()) return@commandMenu
            Pages(message.chat.id, listOf(message.from?.id ?: return@commandMenu)).apply {
                fillPages(list) {
                    msgbox(message.chatId) {
                        parseType = ParseMode.HTML
                        text = "\uD83D\uDC8D –ë–†–ê–ö–ò –í –ì–†–£–ü–ü–ï \uD83D\uDC8D\n"
                    }
                }
            }.update()

        }.apply {
            logger.info("braks local send $this ms")
        }

    }

    command("kid") {
        val fromUser = message.from ?: return@command
        val brak = MongoBrak.getFromUser(fromUser)
        if (brak == null) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, –¥–ª—è —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–æ—è—Ç—å –≤ –±—Ä–∞–∫–µ. üò•",
                replyToMessageId = message.messageId
            )
            return@command
        }
        if (brak.baby != null) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å @${brak.baby?.username()}. üë™",
                replyToMessageId = message.messageId
            )
            return@command
        }
        if (message.replyToMessage == null) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, –¥–ª—è —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. üòòüí¨",
                replyToMessageId = message.messageId
            )
            return@command
        }

        val toUser = message.replyToMessage?.from ?: return@command
        if (toUser.isBot) {
            bot.sendMessage(
                message.chatId, "@${fromUser.username}, –±–æ—Ç–∞ –Ω–µ —Ç—Ä–æ–∂. üëø", replyToMessageId = message.messageId
            )
            return@command
        }
        if (toUser.id == brak.secondUserID || toUser.id == brak.firstUserID) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–æ–¥–∏—Ç—å —Å–µ–±—è –∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞. ü§î",
                replyToMessageId = message.messageId
            )
            return@command
        }
        if (MongoBrak.getFromKid(toUser) != null) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, —ç—Ç–æ—Ç —Ä–µ–±—ë–Ω–æ–∫ —É–∂–µ —É –∫–æ–≥–æ-—Ç–æ —Ä–æ–¥–∏–ª—Å—è. ü§î",
                replyToMessageId = message.messageId
            )
            return@command
        }
        if (getTimeMillis() < (brak.time ?: 0L) + 604800000L) {
            bot.sendMessage(
                message.chatId,
                "@${fromUser.username}, –¥–ª—è —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∂–µ–Ω–∞—Ç—ã –Ω–µ–¥–µ–ª—é. ‚åö",
                replyToMessageId = message.messageId
            )
            return@command
        }

        msgbox(message.chatId) {
            deleteTime = 360
            runBlocking {
                text =
                    "@${toUser.username}, —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–æ–¥–∏—Ç—å—Å—è –≤ —Å–µ–º—å–µ @${brak.firstUsername()} –∏ @${brak.secondUsername()}. üßëüèΩ‚Äçüë©üèΩ‚Äçüßíüèø"
            }
            button("–†–æ–¥–∏—Ç—å—Å—è! ü§±üèª", ContextType.CHOOSE_ONE, listOf(toUser.id)) {
                brak.createBaby(toUser.id)
                answerMessage("–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†\uFE0F\n@${toUser.username} —Ä–æ–¥–∏–ª—Å—è —É @${brak.firstUsername()} –∏ @${brak.secondUsername()}! \uD83E\uDD31\uD83C\uDFFB")
            }
            button("–í—ã–∫–∏–¥—ã—à! üò∂‚Äçüå´Ô∏è", ContextType.CHOOSE_ONE, listOf(toUser.id)) {
                answerMessage("@${toUser.username} –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Å–≤–µ—Ç. \uD83D\uDC80")
            }
        }.sendApplied()
    }

    command("detdom") {
        val user = message.from ?: return@command
        val brak = MongoBrak.getFromKid(user)
        if (brak == null) {
            bot.sendMessage(
                message.chatId, "@${user.username}, —Ç—ã –µ—â—ë –Ω–µ —Ä–æ–¥–∏–ª—Å—è. ‚åö", replyToMessageId = message.messageId
            )
            return@command
        }
        msgbox(message.chatId) {
            runBlocking {
                text =
                    "@${user.username}, —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–π—Ç–∏ –≤ –¥–µ—Ç—Å–∫–∏–π –¥–æ–º –æ—Ç @${brak.firstUsername()} –∏ @${brak.secondUsername()}? üè†"
            }
            button("–î–∞.", ContextType.ONE_CLICK, listOf(user.id)) {
                brak.removeBaby()
                val text = when (Random.nextInt(45)) {
                    in 0..15 -> "@${user.username} —à—ë–ª –ø–æ –¥–æ—Ä–æ–≥–µ –∫ –¥–µ—Ç—Å–∫–æ–º—É –¥–æ–º—É, –∫–æ–≥–¥–∞ –≤–¥—Ä—É–≥ –Ω–∞ –Ω–µ–≥–æ –Ω–∞–ø–∞–ª–æ —Å—Ç–∞–¥–æ –±–µ–ª—ã—Ö –∏ –ø—É—à–∏—Å—Ç—ã—Ö –∫–æ—Ç–∏–∫–æ–≤! –û–Ω–∏ –Ω–æ—Å–∏–ª–∏ –µ–≥–æ –Ω–∞ –ª–∞–ø–∫–∞—Ö, –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–ª–∏ –≤ –≤–æ–∑–¥—É—Ö –∏ –∏–≥—Ä–∞–ª–∏ —Å –Ω–∏–º –≤ –ø—Ä—è—Ç–∫–∏. –í–µ—Å–µ–ª–∞—è –∫–æ—Ç—è—á—å—è –∞—Ä–º–∏—è –ø—Ä–æ–≤–æ–¥–∏–ª–∞ –µ–≥–æ –ø—Ä—è–º–æ –¥–æ –¥–≤–µ—Ä–µ–π –¥–µ—Ç—Å–∫–æ–≥–æ –¥–æ–º–∞, –≥–¥–µ –µ–≥–æ –∂–¥–∞–ª–∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –æ–±—ä—è—Ç–∏—è–º–∏."
                    in 16..20 -> "@${user.username} —Ä–µ—à–∏–ª –±–µ–∂–∞—Ç—å –æ—Ç —Å–≤–æ–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –¥–µ—Ç—Å–∫–∏–π –¥–æ–º, –º–µ—á—Ç–∞—è –æ –ª—É—á—à–µ–π –∂–∏–∑–Ω–∏ –∏ –±–æ–ª—å—à–µ–π –∑–∞–±–æ—Ç–µ. –û–Ω —Å–æ–±—Ä–∞–ª —Å–≤–æ–∏ –Ω–µ–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤–µ—â–∏ –∏ —Ç–∏—Ö–æ–Ω—å–∫–æ –≤—ã—à–µ–ª –∏–∑ –¥–æ–º–∞ –≤ —Ç–µ–º–Ω–æ—Ç–µ. –ü–æ –ø—É—Ç–∏ –æ–Ω —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–≥—Ä–∞–¥–∞–º–∏, –Ω–æ –µ–≥–æ —Ä–µ—à–∏–º–æ—Å—Ç—å –Ω–µ –æ—Å–ª–∞–±–µ–≤–∞–ª–∞. –û–¥–Ω–∞–∫–æ, –≤ –¥–æ–ª–∏–Ω–µ, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ—Å–µ—á—å, —Å–ª—É—á–∏–ª—Å—è —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å. –†–µ–±—ë–Ω–æ–∫ –æ–∫–∞–∑–∞–ª—Å—è –≤ –±–µ–¥–µ –∏ –±–µ–∑ –Ω–∞–¥–µ–∂–¥—ã –Ω–∞ –ø–æ–º–æ—â—å. –û–Ω –ª–µ–∂–∞–ª –Ω–∞ –∑–µ–º–ª–µ, –º–æ–∫—Ä—ã–π –∏ –∏—Å–ø—É–≥–∞–Ω–Ω—ã–π, –ø–æ–∫–∞ –µ–≥–æ —Å–∏–ª—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –µ–≥–æ —Ç–µ–ª–æ. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–ª –æ –µ–≥–æ –ø–µ—á–∞–ª–∏ –∏ –ø–æ—Ç–µ—Ä–µ, –∏ –µ–≥–æ –º–µ—á—Ç—ã –æ –ª—É—á—à–µ–π –∂–∏–∑–Ω–∏ –∏—Å—á–µ–∑–ª–∏ –≤–º–µ—Å—Ç–µ —Å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥—ã—Ö–∞–Ω–∏–µ–º."
                    in 21..30 -> "@${user.username} —É—Å—Ç–∞–≤ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ –∑–∞–ø—Ä–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–ª–∏ –Ω–∞ –Ω–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏, —Ä–µ—à–∏–ª –ø–æ–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –¥–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –¥–µ—Ç—Å–∫–∏–π –¥–æ–º.  –ö–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏—à—ë–ª —Ç—É–¥–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±—ã–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω—ã –µ–≥–æ —Ä–µ—à–∏–º–æ—Å—Ç—å—é –∏ —Å–∫–∞–∑–∞–ª–∏: \"–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –æ–±—ä—è—Ç–∏—è–º–∏, –º–∞–ª—ã—à! –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –Ω–æ–≤—ã–π –¥–æ–º –∏ –Ω–æ–≤—É—é —Å–µ–º—å—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–µ–±–µ.\" –†–µ–±—ë–Ω–æ–∫ —É–ª—ã–±–Ω—É–ª—Å—è –∏ –ø–æ–Ω—è–ª, —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –∏ –≤–º–µ—Å—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏ –Ω–∞—á–∞–ª —Å–≤–æ—ë –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–µ—Ç—Å–∫–æ–º –¥–æ–º–µ."
                    in 31..40 -> "@${user.username} —à—ë–ª –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω–∞, –æ–Ω –±—ã–ª –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–∑–±—É–¥–æ—Ä–∞–∂–µ–Ω –∏ –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω, —á—Ç–æ –µ–≥–æ —ç–Ω–µ—Ä–≥–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω—è–ª–∞ –µ–≥–æ —Å–∞–º–æ–≥–æ. –û–Ω –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–ª –∏ —Ç–∞–Ω—Ü–µ–≤–∞–ª –Ω–∞ —Å–≤–æ–µ–º –ø—É—Ç–∏, –Ω–µ—Å—è —Å —Å–æ–±–æ–π –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –≤–µ—Å–µ–ª—å–µ. –ù–æ –≤–Ω–µ–∑–∞–ø–Ω–æ –µ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º –ø–µ—Ä–µ—à–µ–ª –≤ –ø—Ä–µ–¥–µ–ª—ã –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ, –∏ –æ–Ω –Ω–∞—á–∞–ª —Å–≤–µ—Ä–∫–∞—Ç—å —è—Ä–∫–∏–º —Å–≤–µ—Ç–æ–º, –ø—Ä–µ–≤—Ä–∞—â–∞—è—Å—å –≤ –º–∞–ª–µ–Ω—å–∫—É—é –∑–≤–µ–∑–¥—É. –í—Å–µ, –∫—Ç–æ –≤–∏–¥–µ–ª —ç—Ç–æ —á—É–¥–æ, –≤–æ—Å—Ö–∏—â–µ–Ω–Ω–æ –∑–∞–º–∏—Ä–∞–ª–∏, –ø–æ–Ω–∏–º–∞—è, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ. –ò —Ö–æ—Ç—è –µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ä–µ–±—ë–Ω–æ–∫ –æ—Å—Ç–∞–≤–∏–ª –ø–∞–º—è—Ç—å –æ —Å–≤–æ–µ–π –Ω–µ–ø–æ–¥—Ä–∞–∂–∞–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ä–∞–¥–æ—Å—Ç–∏ –≤ —Å–µ—Ä–¥—Ü–∞—Ö –≤—Å–µ—Ö, –∫—Ç–æ –≤–∏–¥–µ–ª –µ–≥–æ."
                    in 41..45 -> "@${user.username}, —à—ë–ª –∫ –¥–µ—Ç—Å–∫–æ–º—É –¥–æ–º—É, –Ω–µ—Å—è —Å —Å–æ–±–æ–π —Å–≤–æ—é –∫—Ä—É—Ç—É—é –º–µ—Ö–∞–Ω–∏–∫—É –∏–∑ Dota 2. –í–Ω–µ–∑–∞–ø–Ω–æ, –ø–µ—Ä–µ–¥ –Ω–∏–º –≤—ã—Å–∫–æ—á–∏–ª —Å–∏–ª—å–Ω—ã–π –≤—Ä–∞–∂–µ—Å–∫–∏–π –≥–µ—Ä–æ–π, –∏ —Ä–µ–±—ë–Ω–æ–∫ —Å—Ä–∞–∑—É –∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏. –û–Ω –ø—Ä—ã–≥–Ω—É–ª –≤ –≤–æ–∑–¥—É—Ö, —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –∏ –Ω–∞–Ω—ë—Å –º–æ—â–Ω—ã–π —É–¥–∞—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—è –≤—Ä–∞–≥–∞ –≤ –∫–æ—Å–º–æ—Å. –ü—Ä–æ—Ö–æ–∂–∏–µ –æ—à–∞—Ä–∞—à–µ–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∞ —Ä–µ–±—ë–Ω–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Å–≤–æ–π –ø—É—Ç—å, —Å–æ–±–∏—Ä–∞—è –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã –∏ –≤–æ—Å—Ö–∏—â—ë–Ω–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã."
                    else -> ""
                }
                answerMessage(text)
            }
        }.sendApplied()
    }

    command("kidannihilate") {
        val user = message.from ?: return@command
        val brak = MongoBrak.getFromUser(user)
        if (brak == null) {
            bot.sendMessage(
                message.chatId,
                "@${user.username}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –±—Ä–∞–∫–µ. \uD83D\uDE25",
                replyToMessageId = message.messageId
            )
            return@command
        }
        val baby = brak.baby
        if (baby == null) {
            bot.sendMessage(
                message.chatId, "@${user.username}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ—Ç–µ–π. ü§î", replyToMessageId = message.messageId
            )
            return@command
        }
        val partner = brak.partner(user.id) ?: return@command
        msgbox(message.chatId) {
            deleteTime = 360
            runBlocking {
                text = "@${partner.username}, —Ç—ã —Ç–æ–∂–µ —Ö–æ—á–µ—à—å –∞–Ω–Ω–∏–≥–∏–ª–∏—Ä–æ–≤–∞—Ç—å @${baby.username()}? üòê"
            }
            button("–î–∞.", ContextType.ONE_CLICK, listOf(partner.id)) {
                brak.removeBaby()
                answerMessage("–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†\uFE0F\n@${brak.baby?.username()} –±—ã–ª –∞–Ω–Ω–∏–≥–∏–ª–∏—Ä–æ–≤–∞–Ω @${user.username} –∏ @${partner.username}! –û–Ω –ø—Ä–æ–∂–∏–ª ${brak.baby?.timeToString()}")
            }
        }.sendApplied()
    }

    commandMenu("treetext", "üå± –î—Ä–µ–≤–æ (—Ç–µ–∫—Å—Ç)") {
        bot.sendMessage(
            message.chatId, FamilyTree.create(message.from?.id ?: -1).build(), replyToMessageId = message.messageId
        )
    }

    commandMenu("treeimage", "üå≥ –î—Ä–µ–≤–æ (–∫–∞—Ä—Ç–∏–Ω–∫–∞)") {
        bot.sendPhoto(
            message.chatId, telegramTreeFileFromID(message.from?.id ?: -1), replyToMessageId = message.messageId
        )
    }

    commandMenu("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å") {
        val user = message.from ?: return@commandMenu
        MongoUser.getFromUserID(user.id)?.let {
            bot.sendMessage(
                message.chatId,
                it.profile(message.chat.id),
                parseMode = ParseMode.MARKDOWN_V2,
                disableWebPagePreview = false
            )
        }
    }
}